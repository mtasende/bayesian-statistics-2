n.iter=5e3)
## convergence diagnostics
plot(mod1_sim)
gelman.diag(mod1_sim)
autocorr.diag(mod1_sim)
autocorr.diag(mod1_sim)
options(device="X11")
autocorr.plot(mod1_sim)
effectiveSize(mod1_sim)
raftery.diag(mod1_sim)
summary(mod1_csim)
mod1_csim = do.call(rbind, mod1_csim)
mod1_csim = do.call(rbind, mod1_sim)
raftery.diag(mod1_csim)
summary(mod1_csim)
mod1_string = " model {
for( i in 1:length(y)) {
y[i] ~ dnorm(mu[tensGrp[i]], prec)
}
for (j in 1:3) {
mu[j] ~ dnorm(0.0, 1.0/1.0e6)
}
prec ~ dgamma(5/2.0, 5*2.0/2.0)
sig = sqrt(1.0 / prec)
} "
set.seed(83)
str(warpbreaks)
data1_jags = list(y=log(warpbreaks$breaks), tensGrp=as.numeric(warpbreaks$tension))
params1 = c("mu", "sig")
mod1 = jags.model(textConnection(mod1_string), data=data1_jags, n.chains=3)
update(mod1, 1e3)
mod1_sim = coda.samples(model=mod1,
variable.names=params1,
n.iter=5e3)
mod1_csim = do.call(rbind, mod1_sim)
## convergence diagnostics
plot(mod1_sim)
gelman.diag(mod1_sim)
autocorr.diag(mod1_sim)
autocorr.plot(mod1_sim)
summary(mod1_csim)
dic1 = dic.samples(mod1, n.iter=1e3)
dci1
dic1
X = model.matrix( ~ wool + tension, data=warpbreaks)
head(X)
length(X[,1])
X
mod2_string = " model {
for( i in 1:length(y)) {
y[i] ~ dnorm(mu[i], prec)
mu[i] = int + alpha*isWoolB[i] + beta[1]*isTensionM[i] + beta[2]*isTensionH[i]
}
int ~ dnorm(0.0, 1.0/1.0e6)
alpha ~ dnorm(0.0, 1.0/1.0e6)
for (j in 1:2) {
beta[j] ~ dnorm(0.0, 1.0/1.0e6)
}
prec ~ dgamma(3/2.0, 3*1.0/2.0)
sig = sqrt(1.0 / prec)
} "
data2_jags = list(y=log(warpbreaks$breaks), isWoolB=X[,"woolB"], isTensionM=X[,"tensionM"], isTensionH=X[,"tensionH"])
params2 = c("int", "alpha", "beta", "sig")
mod2 = jags.model(textConnection(mod2_string), data=data2_jags, n.chains=3)
update(mod2, 1e3)
mod2_sim = coda.samples(model=mod2,
variable.names=params2,
n.iter=5e3)
## convergene diagnostics
plot(mod2_sim)
## convergene diagnostics
plot(mod2_sim, ask = TRUE)
## convergence diagnostics
plot(mod2_sim, ask = TRUE)
mod2_csim = do.call(rbind, mod2_sim)
gelman.diag(mod2_sim)
autocorr.diag(mod2_sim)
autocorr.plot(mod2_sim)
autocorr.plot(mod2_sim, ask=TRUE)
effectiveSize(mod2_sim)
raftery.diag(mod2_csim)
summary(mod2_sim)
dic2 = dic.samples(mod2, n.iter=1e3)
dic2
dic1
boxplot(log(breaks) ~ wool + tension, data=warpbreaks)
lmod2 = lm(log(breaks) ~ .^2, data=warpbreaks)
summary(lmod2)
mod3_string = " model {
for( i in 1:length(y)) {
y[i] ~ dnorm(mu[woolGrp[i], tensGrp[i]], prec)
}
for (j in 1:max(woolGrp)) {
for (k in 1:max(tensGrp)) {
mu[j,k] ~ dnorm(0.0, 1.0/1.0e6)
}
}
prec ~ dgamma(3/2.0, 3*1.0/2.0)
sig = sqrt(1.0 / prec)
} "
str(warpbreaks)
data3_jags = list(y=log(warpbreaks$breaks), woolGrp=as.numeric(warpbreaks$wool), tensGrp=as.numeric(warpbreaks$tension))
params3 = c("mu", "sig")
mod3 = jags.model(textConnection(mod3_string), data=data3_jags, n.chains=3)
update(mod3, 1e3)
mod3_sim = coda.samples(model=mod3,
variable.names=params3,
n.iter=5e3)
mod3_csim = as.mcmc(do.call(rbind, mod3_sim))
plot(mod3_sim, ask=TRUE)
## convergence diagnostics
gelman.diag(mod3_sim)
autocorr.diag(mod3_sim)
autocorr.plot(mod3_sim)
effectiveSize(mod3_sim)
raftery.diag(mod3_sim)
dic3 = dic.samples(mod3, n.iter=1e3)
dic3
dic2
summary(mod3_sim)
HPDinterval(mod3_csim)
par(mfrow=c(3,2)) # arrange frame for plots
densplot(mod3_csim[,1:6], xlim=c(2.0, 4.5))
prop.table( table( apply(mod3_csim[,1:6], 1, which.min) ) )
boxplot(breaks ~ wool + tension, data=warpbreaks)
boxplot(breaks ~ wool + tension, data=warpbreaks)
options(device = "X11")
library("car")  # load the 'car' package
data("Anscombe")  # load the data set
?Anscombe  # read a description of the data
head(Anscombe)  # look at the first few lines of the data
pairs(Anscombe)  # scatter plots for each pair of variables
Xc = scale(Anscombe, center=TRUE, scale=TRUE)
str(Xc)
data_jags = as.list(data.frame(Xc))
?ddexp
rm(list=ls())
ls()
options(device = "X11")
library("car")  # load the 'car' package
data("Anscombe")  # load the data set
?Anscombe  # read a description of the data
head(Anscombe)  # look at the first few lines of the data
pairs(Anscombe)  # scatter plots for each pair of variables
Xc = scale(Anscombe, center=TRUE, scale=TRUE)
str(Xc)
data_jags = as.list(data.frame(Xc))
# Fitting with JAGS
library("rjags")
mod_string = " model {
for (i in 1:length(education)) {
education[i] ~ dnorm(mu[i], prec)
mu[i] = b[1]*income[i] + b[2]*young[i] + b[3]*urban[i]
}
for (i in 1:3) {
b[i] ~ ddexp(0.0, 1.0) # Has variance = 2
}
eff_sample_size = 1.0
initial_guess = 1.0
alpha = eff_sample_size / 2
beta = alpha * initial_guess
prec ~ dgamma(alpha, beta)
sig2 = 1.0 / prec
sig = sqrt(sig2)
} "
ls()
set.seed(2017)
params = c("b", "sig")
inits = function() {
inits = list("b"=rnorm(3, 0.0, 100.0), "prec"=rgamma(1, 1.0, 1.0))
}
mod = jags.model(textConnection(mod_string), data=data_jags, inits=inits, n.chains=3)
# Burn-in period
update(mod1, 1000)
# Burn-in period
update(mod, 1000)
mod_sim = coda.samples(model=mod, variable.names=params, n.iter=5e3)
mod_csim = do.call(rbind, mod_sim)
### Convergence diagnostics
plot(mod_sim)
raftery.diag(mod_sim)
autocorr.diag(mod_sim)
autocorr.plot(mod_sim, ask=TRUE)
effectiveSize(mod_sim)
gelman.diag(mod_sim)
summary(mod_sim)
rm(list=ls()) # Clear all
# options(device = "RStudioGD")
options(device = "X11")
library("car")  # load the 'car' package
data("Anscombe")  # load the data set
?Anscombe  # read a description of the data
head(Anscombe)  # look at the first few lines of the data
pairs(Anscombe)  # scatter plots for each pair of variables
mod1 = lm(education ~ income + young + urban, data=Anscombe)
summary(mod1)
# Fitting with JAGS
library("rjags")
mod_string = " model {
for (i in 1:length(education)) {
education[i] ~ dnorm(mu[i], prec)
mu[i] = b0 + b[1]*income[i] + b[2]*young[i] + b[3]*urban[i]
}
b0 ~ dnorm(0.0, 1.0/1.0e6)
for (i in 1:3) {
b[i] ~ dnorm(0.0, 1.0/1.0e6)
}
prec ~ dgamma(1.0/2.0, 1.0*1500.0/2.0)
## Initial guess of variance based on overall
## variance of education variable. Uses low prior
## effective sample size. Technically, this is not
## a true 'prior', but it is not very informative.
sig2 = 1.0 / prec
sig = sqrt(sig2)
} "
data_jags = as.list(Anscombe)
set.seed(2017)
params = c("b", "sig")
inits = function() {
inits = list("b"=rnorm(3, 0.0, 100.0), "prec"=rgamma(1, 1.0, 1.0))
}
mod = jags.model(textConnection(mod_string), data=data_jags, inits=inits, n.chains=3)
# Burn-in period
#update(mod1, 1000)
mod_sim = coda.samples(model=mod, variable.names=params, n.iter=2e5)
mod_csim = do.call(rbind, mod_sim)
### Convergence diagnostics
plot(mod_sim)
raftery.diag(mod_sim)
autocorr.diag(mod_sim)
effectiveSize(mod_sim)
gelman.diag(mod_sim)
summary(mod_sim)
source('~/coursera/bayesian_statistics_2/quiz_mf_anova.R', echo=TRUE)
plot(mod_sim)
options(device="X11")
rm(list=ls())
library("car")
data("Leinhardt")
head(Leinhardt)
dat = na.omit(Leinhardt)
dat$logincome = log(dat$income)
dat$loginfant = log(dat$infant)
str(dat)
library("rjags")
mod_string = " model {
for (i in 1:length(y)) {
y[i] ~ dnorm(mu[i], prec)
mu[i] = a[region[i]] + b[1]*log_income[i] + b[2]*is_oil[i]
}
for (j in 1:max(region)) {
a[j] ~ dnorm(a0, prec_a)
}
a0 ~ dnorm(0.0, 1.0/1.0e6)
prec_a ~ dgamma(1/2.0, 1*10.0/2.0)
tau = sqrt(1.0/prec_a)
for (j in 1:2) {
b[j] ~ dnorm(0.0, 1.0/1.0e6)
}
prec ~ dgamma(5/2.0, 5*10.0/2.0)
sig = sqrt(1.0 / prec)
} "
set.seed(116)
data_jags = list(y=dat$loginfant,
log_income=dat$logincome,
is_oil=as.numeric(dat$oil=="yes"),
region=as.numeric(dat$region))
table(data_jags$is_oil, data_jags$region)
params = c("a0", "a", "b", "sig", "tau")
mod = jags.model(textConnection(mod_string), data=data_jags, n.chains=3)
update(mod, 1e3)
mod_sim = coda.samples(model=mod, variable.names=params, n.iter=5e3)
mod_csim = as.mcmc(do.call(rbind, mod_sim))
# Convergence
plot(mod_sim, ask=TRUE)
effectiveSize(mod_sim)
autocorr.plot(mod_sim)
gelman.diag(mod_sim)
raftery.diag(mod_csim)
dic = dic.samples(mod, n.iter=1e3)
dic
summary(mod_sim)
mean(mod_csim[,"a[2]"] > 3.5)
mean(mod_csim[,"a[2]"] > 4.5)
mean(mod_csim[,"a[2]"] > 5.4)
rm(list=ls())
options(device="X11")
# options(device="RStudioGD")
setwd("/home/miguel/coursera/bayesian_statistics_2/capstone/data/preprocessed_data")
library(coda)
library(rjags)
dat = read.csv(file="data.csv", header=TRUE)
head(dat)
sdat <- dat[sample(nrow(dat)),]
plot(as.mcmc(sdat['exchange_rate']))
sdat['quotient'] = (sdat['cpi_usa'] / sdat['cpi'])
plot(as.mcmc(sdat['quotient']))
plot(as.mcmc(sdat['rate_std']))
plot(as.mcmc(sdat['rate_std'] - sdat['quotient']))
plot(as.mcmc(sdat['rate_std'] / sdat['quotient']))
boxplot(rate_std - quotient ~ symbol, data=sdat, ylab="rate_std - cpi quotient", xlab="Currency code")
boxplot(rate_std / quotient ~ symbol, data=sdat, ylab="rate_std - cpi quotient", xlab="Currency code")
boxplot(rate_std - quotient ~ symbol, data=sdat, ylab="rate_std - cpi quotient", xlab="Currency code")
boxplot(rate_std / quotient ~ symbol, data=sdat, ylab="rate_std - cpi quotient", xlab="Currency code")
plot(sdat$quotient, sdat$rate_std)
plot(as.mcmc(sdat['rate_std'] / sdat['quotient']))
boxplot(rate_std / quotient ~ symbol, data=sdat, ylab="rate_std - cpi quotient", xlab="Currency code")
plot(sdat$quotient, sdat$rate_std)
# First let's test a simple linear model, just to have an idea of the value of b
mod_lm = lm(rate_std ~ quotient, data=sdat)
summary(mod_lm)
rm(list=ls())
# options(device="X11")
options(device="RStudioGD")
setwd("/home/miguel/coursera/bayesian_statistics_2/capstone/data/preprocessed_data")
library(coda)
library(rjags)
dat = read.csv(file="data.csv", header=TRUE)
head(dat)
sdat <- dat[sample(nrow(dat)),]
plot(as.mcmc(sdat['exchange_rate']))
sdat['quotient'] = (sdat['cpi_usa'] / sdat['cpi'])
plot(as.mcmc(sdat['quotient']))
plot(as.mcmc(sdat['rate_std']))
plot(as.mcmc(sdat['rate_std'] - sdat['quotient']))
plot(as.mcmc(sdat['rate_std'] / sdat['quotient']))
boxplot(rate_std / quotient ~ symbol, data=sdat, ylab="rate_std - cpi quotient", xlab="Currency code")
plot(sdat$quotient, sdat$rate_std)
summary(mod_lm)
dat = read.csv(file="data.csv", header=TRUE)
head(dat)
sdat <- dat[sample(nrow(dat)),]
plot(as.mcmc(sdat['exchange_rate']))
sdat['quotient'] = (sdat['cpi_usa'] / sdat['cpi'])
plot(as.mcmc(sdat['quotient']))
plot(as.mcmc(sdat['rate_std']))
plot(as.mcmc(sdat['rate_std'] - sdat['quotient']))
plot(as.mcmc(sdat['rate_std'] / sdat['quotient']))
boxplot(rate_std - quotient ~ symbol, data=sdat, ylab="rate_std - cpi quotient", xlab="Currency code")
boxplot(rate_std / quotient ~ symbol, data=sdat, ylab="rate_std - cpi quotient", xlab="Currency code")
plot(sdat$quotient, sdat$rate_std)
# First let's test a simple linear model, just to have an idea of the value of b
mod_lm = lm(rate_std ~ quotient, data=sdat)
summary(mod_lm)
boxplot(rate_std / quotient ~ symbol, data=sdat, ylab="rate_std - cpi quotient", xlab="Currency code")
boxplot(rate_std / quotient ~ symbol, data=sdat, ylab="rate_std / cpi quotient", xlab="Currency code")
sdat['rate_div_cpi_quotient'] = (sdat['rate_std'] / sdat['quotient'])
plot(as.mcmc(sdat['rate_div_cpi_quotient']))
?gelman.diag
effectiveSize(mod_sim)
rm(list=ls())
# options(device="X11")
options(device="RStudioGD")
setwd("/home/miguel/coursera/bayesian_statistics_2/capstone/data/preprocessed_data")
library(coda)
library(rjags)
dat = read.csv(file="data.csv", header=TRUE)
head(dat)
dim(dat)
unique(dat$symbol)
mod_string = " model {
for (i in 1:length(y)) {
y[i] ~ dnorm(mu[symbol[i]], prec[symbol[i]])
}
for (j in 1:max(symbol)) {
mu[j] ~ dnorm(mu0, prec_mu)
prec[j] ~ dgamma(a0, b0)
sig[j] = sqrt(1.0 / prec[j])
}
mu0 ~ dnorm(0.0, 1.0/1.0e6)
prec_mu ~ dgamma(1/2.0, 1*10.0/2.0)
tau = sqrt(1.0/prec_mu)
a0 ~ dexp(100.0)
b0 ~ dexp(100.0)
} "
set.seed(2017)
str(dat)
x = dat$cpi / dat$cpi_usa
y = dat$rate_std * x
data_jags = list(y=y, symbol=as.numeric(dat$symbol))
params = c("mu", "sig", "mu0", "tau", "a0", "b0")
mod = jags.model(textConnection(mod_string), data=data_jags, n.chains=3)
update(mod, 1e3)
mod_sim = coda.samples(model=mod, variable.names=params, n.iter=7e3)
mod_csim = as.mcmc(do.call(rbind, mod_sim))
plot(mod_sim, ask = TRUE)
options(device="X11")
plot(mod_sim, ask = TRUE)
autocorr.diag(mod_sim)
rm(list=ls())
# options(device="X11")
options(device="RStudioGD")
setwd("/home/miguel/coursera/bayesian_statistics_2/capstone/data/preprocessed_data")
library(coda)
library(rjags)
dat = read.csv(file="data.csv", header=TRUE)
head(dat)
dim(dat)
unique(dat$symbol)
mod_string = " model {
for (i in 1:length(y)) {
y[i] ~ dnorm(mu[symbol[i]], prec[symbol[i]])
}
for (j in 1:max(symbol)) {
mu[j] ~ dnorm(mu0, prec_mu)
prec[j] ~ dgamma(a0, b0)
sig[j] = sqrt(1.0 / prec[j])
}
mu0 ~ dnorm(0.0, 1.0/1.0e6)
prec_mu ~ dgamma(1/2.0, 1*10.0/2.0)
tau = sqrt(1.0/prec_mu)
a0 ~ dexp(100.0)
b0 ~ dexp(100.0)
} "
set.seed(2017)
str(dat)
x = dat$cpi / dat$cpi_usa
y = dat$rate_std * x
data_jags = list(y=y, symbol=as.numeric(dat$symbol))
params = c("mu", "sig", "mu0", "tau", "a0", "b0")
mod = jags.model(textConnection(mod_string), data=data_jags, n.chains=3)
update(mod, 1e3)
mod_sim = coda.samples(model=mod, variable.names=params, n.iter=7e3)
mod_csim = as.mcmc(do.call(rbind, mod_sim))
# Let's first calculate the UYU rate (in UYU/USD):
y_uy = y[dat$symbol=='UYU']
x_uy = x[dat$symbol=='UYU']
dat_uy = dat[dat$symbol=='UYU',]
dat_uy_base = dat_uy[dat_uy$date=='2010-08-15',]
mu_rate = (as.numeric(x_uy[120] / dat_uy_base['exchange_rate'])) * (1 / mod_csim[,'mu[49]'])
plot(as.mcmc(mu_rate))
# What is the expectation of UYU? Is it under or over valued?
# (The numeric value for UYU is 49)
mean(mu_rate)
rate_current = (as.numeric(x_uy[120] / dat_uy_base['exchange_rate'])) * (1 / y_uy[120]) # Current rate of UYU/USD
rate_current
y_uy_csim = rnorm(nrow(mod_csim), mod_csim[,'mu[49]'], mod_csim[,'sig[49]'])
rate_uy_csim = (as.numeric(x_uy[120] / dat_uy_base['exchange_rate'])) * (1 / y_uy_csim)
mean(y_uy_csim < y_uy[120])
mean(rate_uy_csim > rate_current)
summary(mod_sim)
dat_uy = dat[dat$symbol=='UYU',]
dat_uy_now = dat_uy[nrow(dat_uy),]
dat_uy_base = dat_uy[dat_uy$date=='2010-08-15',]
ex_min = dat_uy_base$exchange_rate * 1.002746 * dat_uy_now$cpi_usa / dat_uy_now$cpi
ex_max = dat_uy_base$exchange_rate * 1.054839 * dat_uy_now$cpi_usa / dat_uy_now$cpi
1/ex_min
1/ex_max
confidence_int = quantile(y_uy_csim, c(0.025, 0.975))
ex_min_y = dat_uy_base$exchange_rate * confidence_int[1] * dat_uy_now$cpi_usa / dat_uy_now$cpi
ex_max_y = dat_uy_base$exchange_rate * confidence_int[2] * dat_uy_now$cpi_usa / dat_uy_now$cpi
1/ex_min_y
1/ex_max_y
# Expected value
1/(dat_uy_base$exchange_rate * mean(mod_csim[,'mu[49]']) * dat_uy_now$cpi_usa / dat_uy_now$cpi)
y0 = y_uy[120]
u0 = dat$cpi_usa[dat$symbol=='UYU'][120]
u1 = 1.02 * u0 # This is to be variable
# 0.05 quantile (Very confident UI is better if larger than this)
lambda = quantile(y_uy, 0.05)
u1 = u0 * y0 / lambda
inflation_usa_1 = u1 / u0 - 1.0
inflation_usa_1
# Border case (Not sure)
theta = quantile(y_uy, 0.5)
u2 = u0 * y0 / theta
inflation_usa_2 = u2 / u0 - 1.0
inflation_usa_2
# 0.95 quantile (Very confident USD is better if smaller than this)
nu = quantile(y_uy, 0.95)
u3 = u0 * y0 / nu
inflation_usa_3 = u3 / u0 - 1.0
inflation_usa_3
# Historical inflation
u = dat$cpi_usa[dat$symbol=='UYU']
inf_usa = u[2:120] / u[1:119] - 1.0
plot(dat$date[dat$symbol == 'UYU'][2:120], inf_usa)
plot(as.mcmc(inf_usa))
quantile(inf_usa, c(0.025, 0.975))
summary(inf_usa)
# Full P graph when varying u_i
min_ui = (min(inf_usa) + 0.9)*u0
max_ui = (max(inf_usa) + 1.5)*u0
delta = max_ui - min_ui
u_i = seq(from=min_ui, to=max_ui, by=0.01*delta)
p <- 0
for (i in 1:length(u_i)) {
p[i] = mean(y_uy < u0*y0/u_i[i])
}
plot(u_i/u0 - 1.0, p)
abline(0.5, 0.0)
abline(0.05, 0.0)
abline(0.95, 0.0)
points(c(inflation_usa_1, inflation_usa_2, inflation_usa_3), c(0.05, 0.5, 0.95), col=34, pch='O')
text(c(inflation_usa_1, inflation_usa_2, inflation_usa_3) + 0.05, c(0.05, 0.5, 0.95),
labels= paste('x=',c(inflation_usa_1, inflation_usa_2, inflation_usa_3), ',\ny=', c(0.05, 0.5, 0.95)))
options(device="RStudioGD")
min_ui = (min(inf_usa) + 0.9)*u0
max_ui = (max(inf_usa) + 1.5)*u0
delta = max_ui - min_ui
u_i = seq(from=min_ui, to=max_ui, by=0.01*delta)
p <- 0
for (i in 1:length(u_i)) {
p[i] = mean(y_uy < u0*y0/u_i[i])
}
plot(u_i/u0 - 1.0, p)
abline(0.5, 0.0)
abline(0.05, 0.0)
abline(0.95, 0.0)
points(c(inflation_usa_1, inflation_usa_2, inflation_usa_3), c(0.05, 0.5, 0.95), col=34, pch='O')
text(c(inflation_usa_1, inflation_usa_2, inflation_usa_3) + 0.05, c(0.05, 0.5, 0.95),
labels= paste('x=',c(inflation_usa_1, inflation_usa_2, inflation_usa_3), ',\ny=', c(0.05, 0.5, 0.95)))
